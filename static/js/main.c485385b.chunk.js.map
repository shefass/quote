{"version":3,"sources":["components/defaults.js","components/Quate.jsx","App.js","serviceWorker.js","index.js"],"names":["axiosRapidApihQL","axios","create","baseURL","headers","X-RapidAPI-Key","concat","process","Content-Type","colors","bg","txt","Quate","state","error","isLoaded","title","hasCaptureQuote","hasCaptureTweet","content","changeColors","_this","setState","setTimeout","document","documentElement","style","setProperty","doTwoActions","apicallTest","post","then","result","data","author","quote","onEnterQuote","e","onLeaveQuote","onEnterTweet","onLeaveTweet","this","_this$state","buttonHoverQuote","backgroundColor","color","spanStyle","padding","transition","buttonHoverTweet","react_default","a","createElement","message","id","type","onPointerEnter","onPointerLeave","onClick","href","target","rel","Component","App","className","components_Quate","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c485385b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst axiosRapidApihQL = axios.create({\r\n  baseURL:\r\n    \"https://andruxnet-random-famous-quotes.p.rapidapi.com/?count=1&cat=famous\",\r\n  headers: {\r\n    \"X-RapidAPI-Key\": `${process.env.REACT_APP_RAPIDAPI_PERSONAL_ACCESS_TOKEN}`,\r\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n  }\r\n});\r\nconst twitter =\r\n  \"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\";\r\nconst colors = [\r\n  { bg: \"#6893e9\", txt: \"#33518b\" },\r\n  { bg: \"#48597a\", txt: \"black\" },\r\n  { bg: \"#008000\", txt: \"#400080\" },\r\n  { bg: \"#400040\", txt: \"#ff8000\" },\r\n  { bg: \"#c0c0c0\", txt: \"#408080\" },\r\n  { bg: \"#0080ff\", txt: \"#ff80c0\" }\r\n];\r\n\r\nexport { axiosRapidApihQL, twitter, colors };\r\n","import React, { Component } from \"react\";\r\n\r\nimport { axiosRapidApihQL, twitter, colors } from \"./defaults\";\r\n\r\nclass Quate extends Component {\r\n  state = {\r\n    error: null,\r\n    isLoaded: false,\r\n    title: \"\",\r\n    colors: 0,\r\n    hasCaptureQuote: false,\r\n    hasCaptureTweet: false,\r\n    content: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apicallTest();\r\n  }\r\n\r\n  changeColors = () => {\r\n    if (this.state.colors > 4) {\r\n      this.setState({\r\n        colors: 0\r\n      });\r\n    } else {\r\n      this.setState({\r\n        colors: this.state.colors + 1\r\n      });\r\n    }\r\n\r\n    setTimeout(\r\n      () =>\r\n        document.documentElement.style.setProperty(\r\n          \"--main-bg-color\",\r\n          colors[this.state.colors].bg\r\n        ),\r\n      200\r\n    );\r\n    setTimeout(\r\n      () =>\r\n        document.documentElement.style.setProperty(\r\n          \"--main-txt-color\",\r\n          colors[this.state.colors].txt\r\n        ),\r\n      200\r\n    );\r\n  };\r\n\r\n  doTwoActions = () => {\r\n    this.apicallTest();\r\n    this.changeColors();\r\n  };\r\n\r\n  apicallTest = () => {\r\n    axiosRapidApihQL.post().then(\r\n      result => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          title: result.data[0].author,\r\n          content: result.data[0].quote\r\n        });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    );\r\n  };\r\n  onEnterQuote = e => {\r\n    this.setState({ hasCaptureQuote: true });\r\n  };\r\n  onLeaveQuote = e => {\r\n    this.setState({ hasCaptureQuote: false });\r\n  };\r\n  onEnterTweet = e => {\r\n    this.setState({ hasCaptureTweet: true });\r\n  };\r\n  onLeaveTweet = e => {\r\n    this.setState({ hasCaptureTweet: false });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      error,\r\n      isLoaded,\r\n      title,\r\n      content,\r\n      hasCaptureTweet,\r\n      hasCaptureQuote\r\n    } = this.state;\r\n    const buttonHoverQuote = {\r\n      backgroundColor: hasCaptureQuote && \"white\",\r\n      color: hasCaptureQuote && \"black\"\r\n    };\r\n    const spanStyle = {\r\n      padding: hasCaptureQuote && \"10px\",\r\n      transition: \"0.5s\"\r\n    };\r\n    const buttonHoverTweet = {\r\n      backgroundColor: hasCaptureTweet && \"white\",\r\n      color: hasCaptureTweet && \"black\"\r\n    };\r\n\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div id=\"loading\">Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div id=\"quote-box\">\r\n          <h1 id=\"author\">{title}</h1>\r\n          <div id=\"text\">{content}</div>\r\n          <div id=\"buttons\">\r\n            <button\r\n              id=\"new-quote\"\r\n              type=\"button\"\r\n              onPointerEnter={this.onEnterQuote}\r\n              onPointerLeave={this.onLeaveQuote}\r\n              style={buttonHoverQuote}\r\n              onClick={this.doTwoActions}\r\n            >\r\n              <span style={spanStyle}>Next Quote</span>\r\n            </button>\r\n            <a\r\n              href={`${twitter}${title}: \"${content}\"`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <button\r\n                id=\"tweet-quote\"\r\n                type=\"button\"\r\n                onPointerEnter={this.onEnterTweet}\r\n                onPointerLeave={this.onLeaveTweet}\r\n                style={buttonHoverTweet}\r\n              >\r\n                Tweet!\r\n              </button>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Quate;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Quate from \"./components/Quate\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div id=\"wrapper\">\r\n          <Quate />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}