{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axiosRapidApihQL","axios","create","baseURL","headers","X-RapidAPI-Key","concat","process","Content-Type","src_App_0","react_default","a","createElement","className","id","App_Quate","Component","Quate","state","error","isLoaded","title","content","apicall","_this","apicallTest","post","then","result","setState","data","author","quote","this","_this$state","message","type","onClick","href","target","rel","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QAIMA,SAAmBC,EAAMC,OAAO,CACpCC,QAAS,4EACTC,QAAS,CAAEC,iBAAA,GAAAC,OAAqBC,sDACpBC,eAAgB,uCAiB9BC,mLAVI,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACNJ,EAAAC,EAAAC,cAACG,EAAD,eALQC,aAcZC,6MACJC,MAAQ,CACNC,MAAO,KACPC,UAAU,EACVC,MAAO,GACPC,QAAS,MAMXC,QAAU,kBACRC,EAAKC,iBAGLA,YAAc,WACbzB,EAAiB0B,OACfC,KACC,SAACC,GACCJ,EAAKK,SAAS,CACZT,UAAU,EACVC,MAAOO,EAAOE,KAAK,GAAGC,OACtBT,QAASM,EAAOE,KAAK,GAAGE,SAG5B,SAACb,GACCK,EAAKK,SAAS,CACZT,UAAU,EACVD,gGApBRc,KAAKR,+CA0BE,IAAAS,EACqCD,KAAKf,MAAzCC,EADDe,EACCf,MAAOC,EADRc,EACQd,SAAUC,EADlBa,EACkBb,MAAOC,EADzBY,EACyBZ,QAEhC,OAAIH,EACKT,EAAAC,EAAAC,cAAA,qBAAaO,EAAMgB,SAChBf,EAIRV,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACNJ,EAAAC,EAAAC,cAAA,MAAIE,GAAG,UAAUO,GAEjBX,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QAAQQ,GAEhBZ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACNJ,EAAAC,EAAAC,cAAA,UAAQE,GAAG,YAAYsB,KAAK,SAASC,QAASJ,KAAKV,SACjDb,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAAA,KACE0B,KAAI,GAAAhC,OArEF,+EAqEEA,OAAee,EAAf,OAAAf,OAA0BgB,EAA1B,KACJiB,OAAO,SACPC,IAAI,uBACJ9B,EAAAC,EAAAC,cAAA,UAAQE,GAAG,cAAcsB,KAAK,UAA9B,aAhBD1B,EAAAC,EAAAC,cAAA,gCAxCO6B,IAAMzB,WCdN0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACH,EAAD,MAASwC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.cdffaa11.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nconst axiosRapidApihQL = axios.create({\n  baseURL: 'https://andruxnet-random-famous-quotes.p.rapidapi.com/?count=1&cat=famous',\n  headers: { 'X-RapidAPI-Key': `${process.env.REACT_APP_RAPIDAPI_PERSONAL_ACCESS_TOKEN}`,\n              'Content-Type': 'application/x-www-form-urlencoded',\n  },\n});\nconst twitter = 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"wrapper\">\n          <Quate />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nclass Quate extends React.Component {\n  state = {\n    error: null,\n    isLoaded: false,\n    title: '',\n    content: []    };\n\n  componentDidMount() {\n    this.apicallTest();\n    } \n\n  apicall = () => \n    this.apicallTest();\n     \n\n    apicallTest = () => {\n     axiosRapidApihQL.post()\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            title: result.data[0].author,\n            content: result.data[0].quote\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    } \n   \n  render() {\n    const { error, isLoaded, title, content } = this.state;\n    \n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div id=\"quote-box\">\n          <h1 id=\"author\">{title}</h1>\n          \n          <div id=\"text\">{content}</div>\n          \n          <div id=\"buttons\">\n            <button id=\"new-quote\" type=\"button\" onClick={this.apicall}>\n              <span>Next Quote</span>\n            </button>\n            <a \n              href={`${twitter}${title}: \"${content}\"`}\n              target=\"_blank\" \n              rel=\"noopener noreferrer\" >\n              <button id=\"tweet-quote\" type=\"button\">\n                Tweet!\n              </button>\n            </a>\n          </div>\n           \n          \n        </div>\n      );\n    }\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}