{"version":3,"sources":["components/defaults.js","components/Quate.jsx","App.js","serviceWorker.js","index.js"],"names":["axiosRapidApihQL","axios","create","baseURL","headers","X-RapidAPI-Key","concat","process","Content-Type","colors","bg","txt","Quate","state","error","isLoaded","title","content","apicallTest","post","then","result","_this","setState","data","author","quote","changeColors","doTwoActions","this","_this$state","react_default","a","createElement","Segment","message","textAlign","style","borderRadius","Header","as","color","fontSize","Container","marginBottom","lineHeight","Grid","Row","Column","width","Button","onClick","icon","labelPosition","href","target","rel","Icon","name","size","Component","App","Responsive","fluid","components_Quate","backgroundColor","height","display","justifyContent","alignItems","padding","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.deb7bf30.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst axiosRapidApihQL = axios.create({\r\n  baseURL:\r\n    \"https://andruxnet-random-famous-quotes.p.rapidapi.com/?count=1&cat=famous\",\r\n  headers: {\r\n    \"X-RapidAPI-Key\": `${process.env.REACT_APP_RAPIDAPI_PERSONAL_ACCESS_TOKEN}`,\r\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n  }\r\n});\r\nconst twitter =\r\n  \"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\";\r\nconst colors = [\r\n  { bg: \"violet\", txt: \"teal\" },\r\n  { bg: \"orange\", txt: \"black\" },\r\n  { bg: \"yellow\", txt: \"blue\" },\r\n  { bg: \"purple\", txt: \"grey\" },\r\n  { bg: \"olive\", txt: \"brown\" },\r\n  { bg: \"grey\", txt: \"pink\" }\r\n];\r\n\r\nexport { axiosRapidApihQL, twitter, colors };\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Header, Container, Grid, Button, Icon } from \"semantic-ui-react\";\r\n\r\nimport { axiosRapidApihQL, twitter, colors } from \"./defaults\";\r\n\r\nclass Quate extends Component {\r\n  state = {\r\n    error: null,\r\n    isLoaded: false,\r\n    title: \"\",\r\n    colors: 0,\r\n    content: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.apicallTest();\r\n  }\r\n\r\n  apicallTest = () => {\r\n    axiosRapidApihQL.post().then(\r\n      result => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          title: result.data[0].author,\r\n          content: result.data[0].quote\r\n        });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  changeColors = () => {\r\n    if (this.state.colors > 4) {\r\n      this.setState({\r\n        colors: 0\r\n      });\r\n    } else {\r\n      this.setState({\r\n        colors: this.state.colors + 1\r\n      });\r\n    }\r\n  };\r\n\r\n  doTwoActions = () => {\r\n    this.apicallTest();\r\n    this.changeColors();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      error,\r\n      isLoaded,\r\n      title,\r\n      content\r\n      \r\n     } = this.state;\r\n    \r\n\r\n    if (error) {\r\n      return <Segment>Error: {error.message}</Segment>;\r\n    } else if (!isLoaded) {\r\n      return <Segment size='massive'>Loading...</Segment>;\r\n    } else {\r\n      return (\r\n        <Segment textAlign='center' style={{borderRadius: '20px'}} >\r\n          <Header as=\"h1\" color={colors[this.state.colors].txt} style={{fontSize: '3em'}}>\r\n            {title}\r\n          </Header>\r\n          <Container style={{fontSize: '2em', marginBottom: '1em', lineHeight: '1em'}}>\r\n            {content}\r\n          </Container>\r\n          <Grid>\r\n            <Grid.Row>\r\n              <Grid.Column width={8}>\r\n                <Button content=\"Next Quote\" \r\n                onClick={this.doTwoActions}\r\n                color={colors[this.state.colors].txt}\r\n                icon='right arrow'\r\n                labelPosition='right'\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column width={8}>\r\n                <Button\r\n                  as=\"a\"\r\n                  href={`${twitter}${title}: \"${content}\"`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  color={colors[this.state.colors].txt}\r\n                >\r\n                  <Icon name='twitter' /> Tweet!\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Quate;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Quate from \"./components/Quate\";\r\nimport { Container, Responsive } from 'semantic-ui-react';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (         //removinau wraper\r\n      <Responsive as='Container' fluid style={style}>\r\n        <Quate />\r\n      </Responsive >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\nconst style = {\r\n  backgroundColor: \"#6893e9\",\r\n  height: '100vh',\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n  padding: '1em' \r\n }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}